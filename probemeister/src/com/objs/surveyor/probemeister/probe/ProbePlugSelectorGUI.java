/* 
 * <copyright> 
 *   
 *  Copyright 1999-2004 Object Services and Consulting, Inc. 
 *  under sponsorship of the Defense Advanced Research Projects 
 *  Agency (DARPA). 
 *  
 *  You can redistribute this software and/or modify it under the 
 *  terms of the Cougaar Open Source License as published on the 
 *  Cougaar Open Source Website (www.cougaar.org). 
 *  
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 
 *  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT 
 *  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR 
 *  A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT 
 *  OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, 
 *  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT 
 *  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, 
 *  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY 
 *  THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT 
 *  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE 
 *  OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. 
 *   
 * </copyright> 
 */ 

package com.objs.surveyor.probemeister.probe;
import java.awt.*;
import javax.swing.*;

public class ProbePlugSelectorGUI extends javax.swing.JDialog {
        
    ProbePlugEntry[] plugsList = null;
    int index = -1;
    
    public void setPlugsList(ProbePlugEntry[] _pl) {
        if (_pl == null || _pl.length==0) {
            disableButtons();
            this.vPlugClass.setText("===== No compatible ProbePlugs =====");
            this.vPlugMethod.setText("");
            this.vPlugDesc.setText("");
        }
        else {
            plugsList = _pl;
            enableButtons();
        }
    }
    
    public ProbePlugEntry getSelectedPlug() {
        if (index == -1)
            return null;
        else
            return plugsList[index];
    }
    
    private void disableButtons() {        
        this.jbPrev.setEnabled(false);
        this.jbNext.setEnabled(false);
        this.jbSelect.setEnabled(false);
        this.jbCancel.setEnabled(true);
    }
    
    private void enableButtons() {
        this.jbSelect.setEnabled(true);
        this.jbCancel.setEnabled(true);
        index = 0; //set to first entry
        setState();
    }
    
    private void setState() {
        
        //Set state of Previous Button
        if (hasPrev()) 
            this.jbPrev.setEnabled(true);
        else
            this.jbPrev.setEnabled(false);
        
        //Set state of Next Button
        if (hasNext())
            this.jbNext.setEnabled(true);
        else
            this.jbNext.setEnabled(false);            
                
        //Load values into GUI fields.        
        this.vPlugClass.setText(plugsList[index].getClassName());
        this.vPlugMethod.setText(plugsList[index].getMethodName());
        this.vPlugDesc.setText(plugsList[index].getDesc());
    }
    
    private boolean hasPrev() {if (index > 0) return true; else return false;}
    private boolean hasNext() {if (index < this.plugsList.length-1) return true; else return false;}
    
	public ProbePlugSelectorGUI(Frame parent)
	{
		super(parent);
		
		// This code is automatically generated by Visual Cafe when you add
		// components to the visual environment. It instantiates and initializes
		// the components. To modify the code, only use code syntax that matches
		// what Visual Cafe can generate, or Visual Cafe may be unable to back
		// parse your Java file into its visual environment.
		//{{INIT_CONTROLS
		getContentPane().setLayout(null);
		setSize(505,305);
		setVisible(false);
		lTitle.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
		lTitle.setText("Probe Plug Selector");
		getContentPane().add(lTitle);
		lTitle.setFont(new Font("Dialog", Font.BOLD, 18));
		lTitle.setBounds(13,12,484,40);
		lNotice.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
		lNotice.setText("This only displays plugs compatible with the stub chosen");
		getContentPane().add(lNotice);
		lNotice.setFont(new Font("Dialog", Font.PLAIN, 12));
		lNotice.setBounds(14,50,474,16);
		lpClass.setText("ProbePlug Class:");
		getContentPane().add(lpClass);
		lpClass.setBounds(23,95,110,22);
		lpMethod.setText("ProbePlug Method:");
		getContentPane().add(lpMethod);
		lpMethod.setBounds(23,127,110,22);
		lpDesc.setText("Description:");
		getContentPane().add(lpDesc);
		lpDesc.setBounds(23,159,110,22);
		jbPrev.setText("Previous");
		jbPrev.setActionCommand("Previous");
		getContentPane().add(jbPrev);
		jbPrev.setBounds(22,264,88,22);
		jbNext.setText("Next");
		jbNext.setActionCommand("Next");
		getContentPane().add(jbNext);
		jbNext.setBounds(118,264,85,22);
		jbSelect.setText("Select");
		jbSelect.setActionCommand("Select");
		getContentPane().add(jbSelect);
		jbSelect.setBounds(211,264,85,22);
		jbCancel.setText("Cancel");
		jbCancel.setActionCommand("Cancel");
		getContentPane().add(jbCancel);
		jbCancel.setBounds(304,264,85,22);
		getContentPane().add(vPlugClass);
		vPlugClass.setForeground(java.awt.Color.black);
		vPlugClass.setFont(new Font("Dialog", Font.BOLD, 10));
		vPlugClass.setBounds(126,95,353,22);
		getContentPane().add(vPlugMethod);
		vPlugMethod.setForeground(java.awt.Color.black);
		vPlugMethod.setFont(new Font("Dialog", Font.BOLD, 10));
		vPlugMethod.setBounds(137,127,353,22);
		vPlugDesc.setEditable(false);
		getContentPane().add(vPlugDesc);
		vPlugDesc.setBounds(36,184,434,61);
		//}}
	
		//{{REGISTER_LISTENERS
		SymAction lSymAction = new SymAction();
		jbPrev.addActionListener(lSymAction);
		jbNext.addActionListener(lSymAction);
		jbSelect.addActionListener(lSymAction);
		jbCancel.addActionListener(lSymAction);
		//}}
		
		vPlugDesc.setWrapStyleWord(true);
	}

	public ProbePlugSelectorGUI()
	{
		this((Frame)null);
	}

	public ProbePlugSelectorGUI(String sTitle)
	{
		this();
		setTitle(sTitle);
	}

	static public void main(String args[])
	{
		(new ProbePlugSelectorGUI()).setVisible(true);
	}

	public void addNotify()
	{
		// Record the size of the window prior to calling parents addNotify.
		Dimension size = getSize();

		super.addNotify();

		if (frameSizeAdjusted)
			return;
		frameSizeAdjusted = true;

		// Adjust size of frame according to the insets
		Insets insets = getInsets();
		setSize(insets.left + insets.right + size.width, insets.top + insets.bottom + size.height);
	}

	// Used by addNotify
	boolean frameSizeAdjusted = false;

	//{{DECLARE_CONTROLS
	javax.swing.JLabel lTitle = new javax.swing.JLabel();
	javax.swing.JLabel lNotice = new javax.swing.JLabel();
	javax.swing.JLabel lpClass = new javax.swing.JLabel();
	javax.swing.JLabel lpMethod = new javax.swing.JLabel();
	javax.swing.JLabel lpDesc = new javax.swing.JLabel();
	javax.swing.JButton jbPrev = new javax.swing.JButton();
	javax.swing.JButton jbNext = new javax.swing.JButton();
	javax.swing.JButton jbSelect = new javax.swing.JButton();
	javax.swing.JButton jbCancel = new javax.swing.JButton();
	javax.swing.JLabel vPlugClass = new javax.swing.JLabel();
	javax.swing.JLabel vPlugMethod = new javax.swing.JLabel();
	javax.swing.JTextArea vPlugDesc = new javax.swing.JTextArea();
	//}}


	class SymAction implements java.awt.event.ActionListener
	{
		public void actionPerformed(java.awt.event.ActionEvent event)
		{
			Object object = event.getSource();
			if (object == jbPrev)
				jbPrev_actionPerformed(event);
			else if (object == jbNext)
				jbNext_actionPerformed(event);
			else if (object == jbSelect)
				jbSelect_actionPerformed(event);
			else if (object == jbCancel)
				jbCancel_actionPerformed(event);
		}
	}

	void jbPrev_actionPerformed(java.awt.event.ActionEvent event)
	{
		index--;
		setState();			 
	}

	void jbNext_actionPerformed(java.awt.event.ActionEvent event)
	{
		index++;
		setState();			 
	}

	void jbSelect_actionPerformed(java.awt.event.ActionEvent event)
	{
	    this.setVisible(false);
	}

	void jbCancel_actionPerformed(java.awt.event.ActionEvent event)
	{ 
	    index = -1; //no entry chosen
	    this.setVisible(false);
	}
}