/* 
 * <copyright> 
 *   
 *  Copyright 1999-2004 Object Services and Consulting, Inc. 
 *  under sponsorship of the Defense Advanced Research Projects 
 *  Agency (DARPA). 
 *  
 *  You can redistribute this software and/or modify it under the 
 *  terms of the Cougaar Open Source License as published on the 
 *  Cougaar Open Source Website (www.cougaar.org). 
 *  
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 
 *  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT 
 *  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR 
 *  A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT 
 *  OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, 
 *  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT 
 *  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, 
 *  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY 
 *  THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT 
 *  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE 
 *  OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. 
 *   
 * </copyright> 
 */ 
/*
 * GaugeRequestDialog.java
 *
 * Created on April 25, 2002, 9:24 AM
 */

/**
 *
 * @author  Administrator
 */
 
 //com.objs.surveyor.probemeister.remote.GaugeRequestDialog

package com.objs.surveyor.probemeister.remote;


public class GaugeRequestDialog extends javax.swing.JDialog {

    GaugeRequest gr = null;
    boolean deployMe = false;
    public boolean getDeployGauge() {return deployMe;}
    GaugeRequestLocation[] selectedPast = null;
    GaugeRequestLocation[] selectedRecommended = null;
    public GaugeRequestLocation[] getSelectedPast() { return selectedPast;}
    public GaugeRequestLocation[] getSelectedRecommended() { return selectedRecommended;}
    
    /** Creates new form GaugeRequestDialog */
    public GaugeRequestDialog(java.awt.Frame parent) {
        super(parent, true);
        setSize(450,580);
        initComponents();
    }

    // parent, _gID, _desc, _pName, _plugName, _vmName, _locs
    public GaugeRequestDialog(java.awt.Frame parent, GaugeRequest _gr) 
    {        
        this(parent);
        gr = _gr;
        try {
            this.gaugeName.setText(gr.getGaugeID());    
            this.requestDescription.setText(gr.getDeployDesc());
            this.probeID.setText(gr.getProbeName());
            this.plugID.setText(gr.getPlugName());
            this.vmName.setText(gr.getVMName());
            this.locationsList.setListData(gr.getLocations());
            
            lStatus.setForeground(java.awt.Color.blue);
            if (gr.getDeployed()) {
                lStatus.setText("DEPLOYED");
                lStatus.setForeground(java.awt.Color.red);
            }
            else
                lStatus.setText("UNDEPLOYED");
            
            
        } catch (java.rmi.RemoteException re) {
    		javax.swing.JOptionPane.showMessageDialog(parent, "Remote Error occurred displaying request.", 
    		"Error", javax.swing.JOptionPane.INFORMATION_MESSAGE);            
        }
    }

    /* Supplies a list of entries of past deployment locations
     * for this gauge. Displays Object.toString() value.
     */
    public void setPastLocationsList(GaugeRequestLocation[] locs) {
        this.pastLocationsList.setListData(locs);        
    }


    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {
        bOK = new javax.swing.JButton();
        bDeployFromList = new javax.swing.JButton();
        lTitle = new javax.swing.JLabel();
        lStatus = new javax.swing.JLabel();
        lGaugeName = new javax.swing.JLabel();
        lDescription = new javax.swing.JLabel();
        lProbeName = new javax.swing.JLabel();
        lPlugName = new javax.swing.JLabel();
        lvmName = new javax.swing.JLabel();
        locationsListPane = new javax.swing.JScrollPane();
        locationsList = new javax.swing.JList();
        lLocations = new javax.swing.JLabel();
        gaugeName = new javax.swing.JLabel();
        requestDescription = new javax.swing.JTextArea();
        probeID = new javax.swing.JLabel();
        plugID = new javax.swing.JLabel();
        vmName = new javax.swing.JLabel();
        lPastDeploy = new javax.swing.JLabel();
        pastLocationsListPane = new javax.swing.JScrollPane();
        pastLocationsList = new javax.swing.JList();
        
        getContentPane().setLayout(null);
        
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                closeDialog(evt);
            }
        });
        
        bOK.setText("OK");
        bOK.setToolTipText("Close Dialog");
        bOK.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OK_ActionPerformed(evt);
            }
        });
 
        bDeployFromList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
               bDeployFromList_ActionPerformed(evt);
            }
        });      

        locationsList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent e){
                setDeployButton(); //update state of deploy button
            }
        });

        pastLocationsList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent e){
                setDeployButton(); //update state of deploy button
            }
        });
        
        bOK.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OK_ActionPerformed(evt);
            }
        });
        
        
        
        getContentPane().add(bOK);
        bOK.setBounds(190, 510, 70, 30);
        
        lTitle.setFont(new java.awt.Font("Arial Black", 0, 18));
        lTitle.setText("Gauge Deployment Request");
        getContentPane().add(lTitle);
        lTitle.setBounds(90, 10, 273, 26);
 
        String vStatus = "Unknown Status";
        lStatus.setFont(new java.awt.Font("Arial Black", 0, 12));
        lStatus.setText(vStatus);
        getContentPane().add(lStatus);
        lStatus.setBounds(90, 35, 273, 26);
        lStatus.setHorizontalAlignment(javax.swing.JLabel.CENTER);
         
        lGaugeName.setFont(new java.awt.Font("Dialog", 0, 12));
        lGaugeName.setText("Gauge Name:");
        getContentPane().add(lGaugeName);
        lGaugeName.setBounds(20, 60, 77, 16);
        
        lDescription.setFont(new java.awt.Font("Dialog", 0, 12));
        lDescription.setText("Description:");
        getContentPane().add(lDescription);
        lDescription.setBounds(20, 80, 66, 16);
        
        lProbeName.setFont(new java.awt.Font("Dialog", 0, 12));
        lProbeName.setText("Probe Name / ID:");
        getContentPane().add(lProbeName);
        lProbeName.setBounds(20, 120, 94, 16);
        
        lPlugName.setFont(new java.awt.Font("Dialog", 0, 12));
        lPlugName.setText("Plug Name / ID:");
        getContentPane().add(lPlugName);
        lPlugName.setBounds(20, 140, 86, 16);
        
        lvmName.setFont(new java.awt.Font("Dialog", 0, 12));
        lvmName.setText("VM Name:");
        getContentPane().add(lvmName);
        lvmName.setBounds(20, 160, 56, 16);
        
        locationsListPane.setViewportView(locationsList);
        
        getContentPane().add(locationsListPane);
        locationsListPane.setBounds(20, 210, 400, 90);
        
        lLocations.setText("Recommended Location(s):");
        getContentPane().add(lLocations);
        lLocations.setBounds(20, 190, 156, 16);
        
        gaugeName.setText("<gaugeName>");
        getContentPane().add(gaugeName);
        gaugeName.setBounds(110, 60, 230, 16);
        
        requestDescription.setEditable(false);
        requestDescription.setLineWrap(true);
        requestDescription.setBorder(new javax.swing.border.EtchedBorder());
        getContentPane().add(requestDescription);
        requestDescription.setBounds(110, 80, 310, 30);
        
        probeID.setText("<probeID>");
        getContentPane().add(probeID);
        probeID.setBounds(120, 120, 200, 16);
        
        plugID.setText("<Not Applicable>");
        getContentPane().add(plugID);
        plugID.setBounds(120, 140, 200, 16);
        
        vmName.setText("<vmName>");
        getContentPane().add(vmName);
        vmName.setBounds(120, 160, 200, 16);
        
        lPastDeploy.setText("Past Deployment Location(s):");
        getContentPane().add(lPastDeploy);
        lPastDeploy.setBounds(20, 320, 166, 16);
        
        pastLocationsListPane.setViewportView(pastLocationsList);
        
        getContentPane().add(pastLocationsListPane);
        pastLocationsListPane.setBounds(20, 340, 400, 90);
        
        
        bDeployFromList.setText("Deploy To Selected Locations");
        getContentPane().add(bDeployFromList);
        bDeployFromList.setBounds(20, 440, 220, 30);          
        bDeployFromList.setEnabled(false);
        //pack();
    }
    
    /* Used to activate "Deploy To Selected Locations" button, but only
     * if this gauge request has not yet been deployed
     */
    private void setDeployButton() {     
        boolean d = false;
                
        boolean s1 = (pastLocationsList.getSelectedIndices()!=null && 
                      pastLocationsList.getSelectedIndices().length>0 );
        boolean s2 = (locationsList.getSelectedIndices()!=null && 
                      locationsList.getSelectedIndices().length>0 );
        boolean selection = ( s1 || s2);
        try {
            d=gr.getDeployed();
        } catch (java.rmi.RemoteException re) {
        }
        if (selection && !d)
            bDeployFromList.setEnabled(true);
        else
            bDeployFromList.setEnabled(false);
    }
    
    private void bDeployFromList_ActionPerformed(java.awt.event.ActionEvent evt) {
        deployMe = true;
        Object[] oa = locationsList.getSelectedValues();
        Object[] ob = pastLocationsList.getSelectedValues();
        selectedRecommended = new GaugeRequestLocation[oa.length];
        selectedPast = new GaugeRequestLocation[ob.length];
        for (int i=0;i<oa.length; i++)
            selectedRecommended[i] = (GaugeRequestLocation)oa[i];
        for (int i=0;i<ob.length; i++)
            selectedPast[i] = (GaugeRequestLocation)ob[i];
        this.closeDialog(null);
    }

    private void OK_ActionPerformed(java.awt.event.ActionEvent evt) {
        this.closeDialog(null);
    }

    /** Closes the dialog */
    private void closeDialog(java.awt.event.WindowEvent evt) {
        setVisible(false);
        dispose();
    }

    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        javax.swing.JFrame jf= new javax.swing.JFrame();
        //jf.setSize(250,250);
       
        new GaugeRequestDialog(jf).show();
    }


    // Variables declaration - do not modify
    private javax.swing.JButton bDeployFromList;
    private javax.swing.JButton bOK;
    private javax.swing.JLabel lTitle;
    private javax.swing.JLabel lStatus;
    private javax.swing.JLabel lGaugeName;
    private javax.swing.JLabel lDescription;
    private javax.swing.JLabel lProbeName;
    private javax.swing.JLabel lPlugName;
    private javax.swing.JLabel lvmName;
    private javax.swing.JScrollPane locationsListPane;
    private javax.swing.JList locationsList;
    private javax.swing.JLabel lLocations;
    private javax.swing.JLabel gaugeName;
    private javax.swing.JTextArea requestDescription;
    private javax.swing.JLabel probeID;
    private javax.swing.JLabel plugID;
    private javax.swing.JLabel vmName;
    private javax.swing.JLabel lPastDeploy;
    private javax.swing.JScrollPane pastLocationsListPane;
    private javax.swing.JList pastLocationsList;
    
    // End of variables declaration

}
