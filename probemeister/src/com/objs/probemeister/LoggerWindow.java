/* 
 * <copyright> 
 *   
 *  Copyright 1999-2004 Object Services and Consulting, Inc. 
 *  under sponsorship of the Defense Advanced Research Projects 
 *  Agency (DARPA). 
 *  
 *  You can redistribute this software and/or modify it under the 
 *  terms of the Cougaar Open Source License as published on the 
 *  Cougaar Open Source Website (www.cougaar.org). 
 *  
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 
 *  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT 
 *  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR 
 *  A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT 
 *  OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, 
 *  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT 
 *  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, 
 *  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY 
 *  THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT 
 *  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE 
 *  OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. 
 *   
 * </copyright> 
 */ 


package com.objs.probemeister;

import com.objs.surveyor.probemeister.gui.MultiJVM;
import java.awt.Color;
import java.util.Hashtable;

import javax.swing.text.StyleConstants;
import javax.swing.text.SimpleAttributeSet;
import javax.swing.text.AttributeSet;
import javax.swing.text.BadLocationException;

import java.util.Hashtable;

public class LoggerWindow extends javax.swing.JFrame {
    
    MultiJVM gui = null;
    String port;
    String name;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextPane log;
    private Hashtable sockets;
    
    static Color[] COLORS = {Color.black, Color.blue, Color.red, Color.green, Color.magenta, Color.darkGray};    
   
    static SimpleAttributeSet header = new SimpleAttributeSet();
	static SimpleAttributeSet item = new SimpleAttributeSet();
	static SimpleAttributeSet italic = new SimpleAttributeSet();
	static SimpleAttributeSet body   = new SimpleAttributeSet();
	static SimpleAttributeSet basic   = new SimpleAttributeSet();
	static SimpleAttributeSet note   = new SimpleAttributeSet();
    
    
    
    //Instantiated by MultiJVM if global logging var is set to true
    public LoggerWindow(String _port, String _name, MultiJVM _gui) {
        
        gui = _gui;
        name = _name;
        port = _port;
        sockets = new Hashtable(5);
        
        initComponents();
        this.setSize(300, 600);
    }
    
    
    /** Creates new LoggerWindow for testing */
    public LoggerWindow() {
        this(null, null, null);
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {
        jScrollPane1 = new javax.swing.JScrollPane();
        log = new javax.swing.JTextPane();
        log.setEditable(false);
        log.setCaretPosition(0);

        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                exitForm(evt);
            }
        });

        jScrollPane1.setViewportView(log);

        getContentPane().add(jScrollPane1, java.awt.BorderLayout.CENTER);

        pack();
    }
    
    /** Exit the Application */
    private void exitForm(java.awt.event.WindowEvent evt) {
        hide();
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        new LoggerWindow().show();
    }


    /* 
     * The LogServer will get style it will use to print to this window. Each
     * Each socket gets its own color so the text can be seen clearly.
     */
    public SimpleAttributeSet getStyle(int _port) {

        int size = sockets.size();
        
        SimpleAttributeSet sas = (SimpleAttributeSet)sockets.get(new Integer(_port));
        if (sas == null) { //create a new entry for this socket
            sas = new SimpleAttributeSet();
            StyleConstants.setForeground(sas, COLORS[sockets.size() % 5]);
            if ( (size % 10) > 5) //to further differentiate
        	    StyleConstants.setItalic(sas, true);	    
            
            sockets.put(new Integer(_port), sas);
        }
        return sas;
    }
    
    
    public void insertText(String text, AttributeSet set) {
        try {
            log.getDocument().insertString(
            log.getDocument().getLength(), text, set); 
        } 
        catch (BadLocationException e) {
            e.printStackTrace();
        }
        
        //Keeps scrolling window... user may not want this!!!
        try {
            log.setCaretPosition(log.getText().length()-1);        
        } catch (Exception e) {
            //??? do what
        }
    }

    // Needed for inserting icons/text in the right places
    protected void setEndSelection() {
        log.setSelectionStart(log.getDocument().getLength());
        log.setSelectionEnd(log.getDocument().getLength());    
    }
	
    void clear() {
	    try {
    	    log.getDocument().remove(0, log.getDocument().getLength());
        } catch (BadLocationException bde) {
            
        }
    }
    
	private void defineStyles() {
	    //define styles
	    StyleConstants.setFontSize(header, 14);
	    StyleConstants.setBold(header, true);
	    StyleConstants.setFontFamily(header, "Helvetica");
	    
	    StyleConstants.setFontSize(item, 12);
	    StyleConstants.setBold(item, true);
	    StyleConstants.setFontFamily(item, "Helvetica");
        StyleConstants.setLeftIndent(item, 3);
	    StyleConstants.setUnderline(item, true);

	    StyleConstants.setFontFamily(body, "Helvetica");	    
        StyleConstants.setLeftIndent(body, 6);

	    StyleConstants.setFontFamily(note, "Helvetica");	    
        StyleConstants.setLeftIndent(note, 10);
	    StyleConstants.setFontSize(note, 10);
	    StyleConstants.setBold(note, true);

	    StyleConstants.setFontFamily(basic, "monospaced");	    
        StyleConstants.setLeftIndent(basic, 6);

	    StyleConstants.setItalic(italic, true);	    
        StyleConstants.setLeftIndent(italic, 6);
    }
    
}
